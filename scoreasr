#!/usr/bin/env bash

ProgName=$(basename $0)

help_print(){
	cat <<EOF
Usage: pcar ${ProgName} [options]
	-h, --help 	--help information

Parameters passed from PCAR:
 -I, --asepi ASEpiFile	File containing DNA methylation level and H3K9me3 in parents. Default: Epi.txt in current working directory.
 -R, --asexpr ASExprDir	Directory containing expression data. Default: current working directory.
 -U, --regu ReguDir	Directory containing regulation data. Default: current working directory.
 -N, --name Name	Name will be used to generate file names. Default: NA.
 -O, --outdir OutDir	If specified all output files will be written to that directory. Default: current working directory.
EOF
}

if [ $# = 0 ]
then
	help_print
	exit 1
fi

ARGS=$(getopt -o I:R:U:N:O:h --long asepi:,asexpr:,regu:,name:,outdir:,help -n "pcar -m scoreasr" -- "$@")
eval set -- "${ARGS}"
while true
do
	case "${1}" in
		-I | --asepi)
			ASEpi=$(realpath ${2});shift 2;;
		-R | --asexpr)
			ASExprDir=$(realpath ${2});shift 2;;
		-U | --regu)
			ReguDir=$(realpath ${2});shift 2;;
		-N | --name)
			Name=${2};shift 2;;
		-O | --outdir)
			OutDir=$(realpath ${2});shift 2;;
		-h | --help)
			help_print;exit 1;;
		--)
			shift
			break
			;;
		*)
			echo "Unknown parameter:" ${1}
			help_print
			exit 1
			;;
		\?)
			echo "Invalid option: -${2}"
			;;
		:)
			echo "Option -${1} requires an argument."
			exit 1
			;;
	esac 
done


mkdir -p ${OutDir};cd ${OutDir}
score_asepi(){
	# File format required for asepi:
	# #Chrom	Start	End	M_mat	M_pat	H_mat	H_pat
	# chr1		

	grep -v "#" ${ASEpi} | cut -f 1-3 | sort -k1,1 -k2,2n > ${Name}.bed # temporary

	Stage=$(cat ${ASEpi} | awk 'BEGIN{FS=OFS="\t"}{print (NF-3)/4}' | sort -u)
	echo -e "There are ${Stage} stages of parental epigenetic data!"
	grep -v "#" ${ASEpi} | sort -k1,1 -k2,2n | awk -v STAGE=${Stage} '\
	 function score_I(M_mat, M_pat, H_mat, H_pat){\
	 	RES=0;\
	 	if(M_mat!="NA" && M_pat!="NA" && H_mat!="NA" && H_pat!="NA"){\
	 		if(M_mat>=0.5 && H_mat>=0.3){if(M_pat/M_mat<=0.5 && H_pat/H_mat<=0.5){RES=1;}} \
	 		else if(M_pat>=0.5 && H_pat>=0.3){if(M_mat/M_pat<=0.5 && H_mat/H_pat<=0.5){RES=-1;}}};\
	 	return RES};\
	 function abs(v){return v > 0 ? v : -1*v};\
	 BEGIN{FS=OFS="\t";}{\
	 	SCORE=0;\
	 	for(i=1;i<=STAGE;i++){SCORE+=score_I($(4*i), $(4*i+1), $(4*i+2), $(4*i+3))};\
	 	print $1, $2, $3, SCORE/STAGE, abs(SCORE/STAGE)}' > ${Name}.score_asepi.txt
}
score_asepi

score_asexpr(){
	# Files contained in ${RDIR}: KnownIG.promoter.bed, Expr_genes.promoter.txt, Expr_transposableElements.promoter.txt
	# File format of Expr_genes.promoter.txt and Expr_transposableElements.promoter.txt:
	# Chrom	Start	End	GeneName	E_mat	E_pat	E_mat	E_pat ... (contains at least 2 stages)

	knownIGs(){
		windowBed -w 300000 -c -a ${Name}.bed -b ${ASExprDir}/KnownIG.promoter.bed | \
		 awk 'BEGIN{FS=OFS="\t"}{if($4>0){print $1, $2, $3, 1} else{print $1, $2, $3, 0}}' > ${Name}.knownIGs.txt
	}
	knownIGs

	expr(){
		:>${Name}.score_asexpr_genes.txt;:>${Name}.score_asexpr_transposableElements.txt
		nTotal=$(cat ${Name}.bed | wc -l)
		gStage=$(cat ${ASExprDir}/Expr_genes.promoter.txt | awk 'BEGIN{FS=OFS="\t"}{print NF/2-2}' | sort -u)
		tStage=$(cat ${ASExprDir}/Expr_transposableElements.promoter.txt | awk 'BEGIN{FS=OFS="\t"}{print NF/2-2}' | sort -u)
		echo -e "There are ${gStage} stages of parental expression data in gene unit and ${tStage} stages in transposable element unit!"

		for nRow in $(seq 1 ${nTotal})
		do
			sed -n "${nRow}p" ${Name}.bed > nEle.bed # temporary

			exprUnit(){
				# exprUnit within 300kb
				windowBed -w 300000 -a nEle.bed -b ${ASExprDir}/Expr_${1}.promoter.txt > ${ASExprDir}/nEle.expr_exprUnit.txt # temporary
			
				# Score of exprUnit within 300kb
				eExprUnit=$(cat ${ASExprDir}/nEle.expr_exprUnit.txt | awk 'BEGIN{FS="\t";ORS=";"}{print $7}')
				eExprUnitScore=$(cat ${ASExprDir}/nEle.expr_exprUnit.txt | awk -v STAGE=${2} '\
				 	function score_R(E_mat, E_pat){\
				 		RES=0;\
				 		if(E_mat>=2 && E_mat-E_pat>=1){RES=1;} \
				 		else if(E_pat>=2 && E_pat-E_mat>=1){RES=-1;};\
				 		return RES;};\
				 	function abs(v){return v > 0 ? v : -1*v};\
				 	BEGIN{FS="\t";ORS=";"}{\
				  		SCORE=0;\
				  		for(i=1;i<=STAGE;i++){SCORE+=score_R($(2*i+6), $(2*i+7))};\
				  		if(abs(SCORE)>=2){print SCORE/STAGE} else{print 0}}')

				Score=$(cat ${ASExprDir}/nEle.expr_exprUnit.txt | awk -v STAGE=${2} '\
					function score_R(E_mat, E_pat){\
						RES=0;\
						if(E_mat>=2 && E_mat-E_pat>=1){RES=1;} \
						else if(E_pat>=2 && E_pat-E_mat>=1){RES=-1;};\
						return RES;};\
					function abs(v){return v > 0 ? v : -1*v};\
					BEGIN{FS="\t";M=0;}{\
				 		SCORE=0;\
				  		for(i=1;i<=STAGE;i++){SCORE+=score_R($(2*i+6), $(2*i+7))};\
				 		if(abs(SCORE/STAGE)>=abs(M) && abs(SCORE)>=2){M=SCORE/STAGE;}}END{print M}')
				echo -e "${eExprUnit}\t${eExprUnitScore}\t${Score}" > nEle.AlleleScoreManaged.txt # temporary
			
				cat nEle.AlleleScoreManaged.txt >> ${Name}.score_asexpr_${1}.txt
				rm ${ASExprDir}/nEle.expr_exprUnit.txt nEle.AlleleScoreManaged.txt
				unset eExprUnit eExprUnitScore Score
			}

			exprUnit genes ${gStage}
			exprUnit transposableElements ${tStage}
			rm nEle.bed
		done # for nRow end
	}
	expr
}
score_asexpr

score_regu(){
	# Files contained in ${ReguDir}: Zfp57motif.methyl.txt, LncRNA.bed, Ctcf.bed
	# File format of Zfp57motif.methyl.txt:
	# Chrom	Start	End	M_mat	M_pat	M_mat	M_pat ...
	asMethylZfp57Motif(){
		:>${Name}.score_regu_asMethylZfp57Motif.txt
		Stage=$(cat ${ReguDir}/Zfp57motif.methyl.txt | awk 'BEGIN{FS=OFS="\t"}{print (NF-3)/2}' | sort -u)
		nTotal=$(cat ${Name}.bed | wc -l)
		for nRow in $(seq 1 ${nTotal})
		do
			sed -n "${nRow}p" ${Name}.bed > nEle.bed # temporary
	
			# overlap with allele-specific methylated Zfp57 motif
			intersectBed -wao -a nEle.bed -b ${ReguDir}/Zfp57motif.methyl.txt > nEle.Zfp57motif.methyl.txt # temporary
			
			noMotif=$(cut -f 4 nEle.Zfp57motif.methyl.txt | sort -u)
			if [ "${noMotif}" == "." ]
			then
				eScore=0
				Score=0
			else
				eScore=$(cat nEle.Zfp57motif.methyl.txt | awk -v STAGE=${Stage} '\
					function score_M(M_mat, M_pat){\
						RES=0;\
						if(M_mat!="NA" && M_pat!="NA"){\
							if(M_mat>=0.5 && M_pat/M_mat<=0.5){RES=1;} \
							else if(M_pat>=0.5 && M_mat/M_pat<=0.5){RES=-1;}};\
						return RES;};\
					BEGIN{FS="\t";ORS=";"}{\
						SCORE=0;\
						for(i=1;i<=STAGE;i++){SCORE+=score_M($(2*i+5), $(2*i+6))};\
						print SCORE}')
			
				Score=$(cat nEle.Zfp57motif.methyl.txt | awk -v STAGE=${Stage} '\
					function score_M(M_mat, M_pat){\
						RES=0;\
						if(M_mat!="NA" && M_pat!="NA"){\
							if(M_mat>=0.5 && M_pat/M_mat<=0.5){RES=1;} \
							else if(M_pat>=0.5 && M_mat/M_pat<=0.5){RES=-1;}};\
						return RES;};\
					function abs(v){return v > 0 ? v : -1*v};\
					BEGIN{FS="\t";M=0;}{\
						SCORE=0;\
						for(i=1;i<=STAGE;i++){SCORE+=score_M($(2*i+5), $(2*i+6))};\
						if(abs(SCORE/STAGE)>=abs(M)){M=SCORE/STAGE}}END{print M}')
			fi
			echo -e "${eScore}\t${Score}" > nEle.Zfp57motif.score.txt # temporary
			paste nEle.bed nEle.Zfp57motif.score.txt >> ${Name}.score_regu_asMethylZfp57Motif.txt
			rm nEle.bed nEle.Zfp57motif.methyl.txt nEle.Zfp57motif.score.txt
			unset eScore Score
		done # for nRow end
	}
	asMethylZfp57Motif

	CtcfOrLncRNA(){
		intersectBed -c -a ${Name}.bed -b ${ReguDir}/Ctcf.bed | awk 'BEGIN{FS=OFS="\t"}{if($4==0){print $1, $2, $3, 0} else{print $1, $2, $3, 1}}' > ${Name}.score_regu_Ctcf.txt
		intersectBed -c -a ${Name}.bed -b ${ReguDir}/LncRNA.bed | awk 'BEGIN{FS=OFS="\t"}{if($4==0){print $1, $2, $3, 0} else{print $1, $2, $3, 1}}' > ${Name}.score_regu_LncRNA.txt
	}
	CtcfOrLncRNA

	score_manage(){
		cd ${OutDir}
		echo -ne "#Chrom\tStart\tEnd" > ${Name}.score.title.txt

		# asepi
		echo -ne "\tasepi\tscore.asepi" >> ${Name}.score.title.txt
		cat ${Name}.score_asepi.txt > ${Name}.score.txt
		
		# asexpr
		echo -ne "\tasexpr.knownIGs\tasexpr.genes\tasexpr.transposable.elements\tscore.asexpr" >> ${Name}.score.title.txt
		paste ${Name}.knownIGs.txt ${Name}.score_asexpr_genes.txt ${Name}.score_asexpr_transposableElements.txt | \
			awk 'function abs(v){return v > 0 ? v : -1*v};\
		 		function max(a, b){return a > b ? a : b};\
		 		BEGIN{FS=OFS="\t"}{\
		 		print $4, $7, $10, max($4, max(abs($7), abs($10)))}\' | \
		 	paste ${Name}.score.txt - > ${Name}.score.txt.tmp && mv ${Name}.score.txt.tmp ${Name}.score.txt

		# regu
		echo -ne "\tregu.asMethylZfp57Motif\tregu.CtcfOrLncRNA\tscore.regu" >> ${Name}.score.title.txt
		paste ${Name}.score_regu_asMethylZfp57Motif.txt ${Name}.score_regu_Ctcf.txt ${Name}.score_regu_LncRNA.txt | \
			awk 'function abs(v){return v > 0 ? v : -1*v};\
				function max(a, b){return a > b ? a : b};
				BEGIN{FS=OFS="\t"}{print $5, max($9,$13), (abs($5) + max($9,$13))/2}' | \
			paste ${Name}.score.txt - > ${Name}.score.txt.tmp && mv ${Name}.score.txt.tmp ${Name}.score.txt

		# sum
		echo -ne "\tscore\n" >> ${Name}.score.title.txt
		cat ${Name}.score.txt | awk 'BEGIN{FS=OFS="\t"}{if($5>0){print $0, $5+$9+$12} else{print $0, 0}}' | sort -k13,13nr -k6,6nr -k1,1 > ${Name}.score.txt.tmp && mv ${Name}.score.txt.tmp ${Name}.score.txt
		cat ${Name}.score.title.txt ${Name}.score.txt > ${Name}.score.txt.tmp && mv ${Name}.score.txt.tmp ${Name}.score.txt
	}
	score_manage
}
score_regu

rmTemp(){
	rm ${Name}.bed ${Name}.score_asepi.txt ${Name}.knownIGs.txt ${Name}.score_regu_asMethylZfp57Motif.txt ${Name}.score_regu_Ctcf.txt ${Name}.score_regu_LncRNA.txt ${Name}.score.title.txt
}
rmTemp
